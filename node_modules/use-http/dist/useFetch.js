"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
// @ts-nocheck
var fast_deep_equal_1 = __importDefault(require("fast-deep-equal"));
var react_1 = require("react");
var use_ssr_1 = __importDefault(require("use-ssr"));
var urs_1 = __importDefault(require("urs"));
var types_1 = require("./types");
var useFetchArgs_1 = __importDefault(require("./useFetchArgs"));
var doFetchArgs_1 = __importDefault(require("./doFetchArgs"));
var utils_1 = require("./utils");
var cache_1 = __importDefault(require("./cache"));
var CACHE_FIRST = types_1.CachePolicies.CACHE_FIRST, NO_CACHE = types_1.CachePolicies.NO_CACHE, SWR = types_1.CachePolicies.SWR;
// useSWR's mutate function
var setCache = function (reqID, _data, shouldRevalidate) {
    if (shouldRevalidate === void 0) { shouldRevalidate = true; }
    return __awaiter(void 0, void 0, void 0, function () {
        var cache, data, error, err_1, err_2;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    if (!reqID)
                        return [2 /*return*/];
                    cache = cache_1.default.getLocalCache(reqID);
                    // if there is no new data, call revalidate against the reqID
                    if (typeof _data === 'undefined') {
                        // return cache.listeners.forEach((l, i) => cache.notify(shouldRevalidate, cache.data, cache.error, i > 0))
                        return [2 /*return*/, cache.notify(function (listener, i) { return listener(shouldRevalidate, cache.data, cache.error, i > 0); })];
                    }
                    if (!(_data && typeof _data === 'function')) return [3 /*break*/, 5];
                    _a.label = 1;
                case 1:
                    _a.trys.push([1, 3, , 4]);
                    return [4 /*yield*/, _data(cache.data)];
                case 2:
                    data = _a.sent();
                    return [3 /*break*/, 4];
                case 3:
                    err_1 = _a.sent();
                    error = err_1;
                    return [3 /*break*/, 4];
                case 4: return [3 /*break*/, 11];
                case 5:
                    if (!(_data && typeof _data.then === 'function')) return [3 /*break*/, 10];
                    _a.label = 6;
                case 6:
                    _a.trys.push([6, 8, , 9]);
                    return [4 /*yield*/, _data];
                case 7:
                    data = _a.sent();
                    return [3 /*break*/, 9];
                case 8:
                    err_2 = _a.sent();
                    error = err_2;
                    return [3 /*break*/, 9];
                case 9: return [3 /*break*/, 11];
                case 10:
                    data = _data;
                    _a.label = 11;
                case 11:
                    if (typeof data !== 'undefined') {
                        // update cached data, avoid notifying from the cache
                        cache.set(data, false);
                    }
                    // update existing SWR Hooks' state
                    cache.notify(function (listener, i) { return listener(shouldRevalidate, data, error, i > 0); });
                    // throw error or return data to be used by caller of mutate
                    if (error)
                        throw error;
                    return [2 /*return*/, data];
            }
        });
    });
};
function useFetch() {
    var _this = this;
    var args = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
    }
    var _a = useFetchArgs_1.default.apply(void 0, args), host = _a.host, path = _a.path, customOptions = _a.customOptions, requestInit = _a.requestInit, dependencies = _a.dependencies;
    var reqID = path;
    var cacheLife = customOptions.cacheLife, cachePolicy = customOptions.cachePolicy, // 'stale-while-revalidate' by default
    initialData = customOptions.initialData, interceptors = customOptions.interceptors, lazy = customOptions.lazy, onAbort = customOptions.onAbort, onError = customOptions.onError, onNewData = customOptions.onNewData, onTimeout = customOptions.onTimeout, perPage = customOptions.perPage, persist = customOptions.persist, responseType = customOptions.responseType, retries = customOptions.retries, retryDelay = customOptions.retryDelay, retryOn = customOptions.retryOn, suspense = customOptions.suspense, timeout = customOptions.timeout, debug = customOptions.debug, defaults = __rest(customOptions, ["cacheLife", "cachePolicy", "initialData", "interceptors", "lazy", "onAbort", "onError", "onNewData", "onTimeout", "perPage", "persist", "responseType", "retries", "retryDelay", "retryOn", "suspense", "timeout", "debug"]);
    react_1.useEffect(function () {
        cache_1.default.configure(reqID, { persist: persist, cachePolicy: cachePolicy, cacheLife: cacheLife });
    }, [reqID, persist, cachePolicy, cacheLife]);
    var cache = cache_1.default.getLocalCache(reqID);
    var x = reqID + " (" + debug + "): ";
    // if a state is accessed (data, error or isValidating),
    // we add the state to dependencies so if the state is
    // updated in the future, we can trigger a rerender
    // const stateDependencies = useRef({
    //   data: false,
    //   error: false,
    //   isValidating: false
    // })
    // const stateRef = useRef({
    //   data: initialData,
    //   error: initialError,
    //   isValidating: false
    // })
    // const rerender = useReducer(() => ({}), [])[1]
    // let dispatch = useCallback(payload => {
    //   let shouldUpdateState = false
    //   for (let k in payload) {
    //     stateRef.current[k] = payload[k]
    //     if (stateDependencies.current[k]) {
    //       shouldUpdateState = true
    //     }
    //   }
    //   if (shouldUpdateState || suspense) {
    //     rerender()
    //   }
    // }, [])
    // useEffect(() => {
    //   if (!reqID) return
    // }, [])
    var isServer = use_ssr_1.default().isServer;
    var controller = react_1.useRef();
    var attempt = react_1.useRef(0);
    var error = react_1.useRef();
    var hasMore = react_1.useRef(true);
    var suspenseStatus = react_1.useRef('pending');
    var suspender = react_1.useRef();
    var mounted = react_1.useRef(false);
    var expiration = react_1.useRef(Date.now() + cacheLife);
    var _b = urs_1.default(cache.data), data = _b[0], setData = _b[1];
    var _c = urs_1.default(defaults.loading), loading = _c[0], setLoading = _c[1];
    var rerender = react_1.useReducer(function () { return ({}); }, [])[1];
    // for react-native, could use https://www.npmjs.com/package/sync-storage
    // if ([CACHE_FIRST, SWR].includes(cachePolicy) && cache.has(reqID)) {
    //   console.log(x, 'setting data.current on rerender')
    //   data.current = cache.get(reqID)
    // }
    var block = cachePolicy === NO_CACHE;
    var makeFetch = utils_1.useDeepCallback(function (method, isBlocking) {
        // let prevDedupeID
        // let prevController
        if (isBlocking === void 0) { isBlocking = block; }
        var doFetch = function (routeOrBody, body) { return __awaiter(_this, void 0, void 0, function () {
            var theController, _a, url, options, newData, newError, newRes, timer, timedout, promise, _b, opts, shouldRetry, _c, _d, theResponse, err_3, opts, shouldRetry, _e, _f, res;
            return __generator(this, function (_g) {
                switch (_g.label) {
                    case 0:
                        if (isServer)
                            return [2 /*return*/]; // for now, we don't do anything on the server
                        // const dedupeID = path + route + ':' + method
                        // if (prevDedupeID === dedupeID && 'abort' in prevController) prevController.abort()
                        // prevDedupeID = dedupeID
                        // controller.current = prevController = new AbortController()
                        controller.current = new AbortController();
                        controller.current.signal.onabort = onAbort;
                        theController = controller.current;
                        return [4 /*yield*/, doFetchArgs_1.default(requestInit, method, theController, host, path, routeOrBody, body, interceptors.request)];
                    case 1:
                        _a = _g.sent(), url = _a.url, options = _a.options;
                        timedout = false;
                        console.log("==== " + x + " ====", cache.has(reqID));
                        // don't perform the request if there is no more data to fetch (pagination)
                        if (perPage > 0 && !hasMore.current && !error.current)
                            return [2 /*return*/, data.current];
                        _g.label = 2;
                    case 2:
                        _g.trys.push([2, 17, 23, 24]);
                        if (!(cache.has(reqID) && !cache.isStale && !isBlocking && [CACHE_FIRST, SWR].includes(cachePolicy))) return [3 /*break*/, 4];
                        return [4 /*yield*/, cache.get(reqID)
                            // newData = await cache.get(reqID)
                            // console.log(`${x} (doFetch) newData`, newData)
                        ];
                    case 3:
                        newData = _g.sent();
                        return [3 /*break*/, 16];
                    case 4:
                        if (!suspense && !lazy && cachePolicy !== SWR)
                            setLoading(true);
                        timer = timeout && setTimeout(function () {
                            timedout = true;
                            theController.abort();
                            if (onTimeout)
                                onTimeout();
                        }, timeout);
                        promise = fetch(url, options);
                        if ([CACHE_FIRST, SWR].includes(cachePolicy)) {
                            cache.promise = promise;
                        }
                        return [4 /*yield*/, promise];
                    case 5:
                        newRes = _g.sent();
                        return [4 /*yield*/, utils_1.tryGetData(newRes, initialData, responseType)];
                    case 6:
                        newData = _g.sent();
                        newRes.data = onNewData(data.current, newData);
                        if (!interceptors.response) return [3 /*break*/, 8];
                        return [4 /*yield*/, interceptors.response({ response: newRes })];
                    case 7:
                        _b = _g.sent();
                        return [3 /*break*/, 9];
                    case 8:
                        _b = newRes;
                        _g.label = 9;
                    case 9:
                        newRes = _b;
                        newData = newRes.data;
                        utils_1.invariant('data' in newRes, 'You must have `data` field on the Response returned from your `interceptors.response`');
                        opts = { attempt: attempt.current, response: newRes };
                        // if we just have `retries` set with NO `retryOn` then
                        // automatically retry on fail until attempts run out
                        _c = !utils_1.isFunction(retryOn) && Array.isArray(retryOn) && retryOn.length < 1 && (newRes === null || newRes === void 0 ? void 0 : newRes.ok) === false
                            // otherwise only retry when is specified
                            || Array.isArray(retryOn) && retryOn.includes(newRes.status);
                        if (_c) 
                        // if we just have `retries` set with NO `retryOn` then
                        // automatically retry on fail until attempts run out
                        return [3 /*break*/, 12];
                        _d = utils_1.isFunction(retryOn);
                        if (!_d) return [3 /*break*/, 11];
                        return [4 /*yield*/, retryOn(opts)];
                    case 10:
                        _d = (_g.sent());
                        _g.label = 11;
                    case 11:
                        _c = _d;
                        _g.label = 12;
                    case 12:
                        shouldRetry = (_c) && retries > 0 && retries > attempt.current;
                        if (!shouldRetry) return [3 /*break*/, 14];
                        return [4 /*yield*/, retry(opts, routeOrBody, body)];
                    case 13:
                        theResponse = _g.sent();
                        return [2 /*return*/, theResponse];
                    case 14:
                        if (Array.isArray(newData) && !!(newData.length % perPage))
                            hasMore.current = false;
                        if (!([CACHE_FIRST, SWR].includes(cachePolicy) && !utils_1.isEmpty(newData))) return [3 /*break*/, 16];
                        return [4 /*yield*/, cache.set(newData, false)];
                    case 15:
                        _g.sent();
                        _g.label = 16;
                    case 16: return [3 /*break*/, 24];
                    case 17:
                        err_3 = _g.sent();
                        console.log('ERR', err_3);
                        if (attempt.current >= retries && timedout)
                            newError = utils_1.makeError('AbortError', 'Timeout Error');
                        opts = { attempt: attempt.current, error: err_3 };
                        // if we just have `retries` set with NO `retryOn` then
                        // automatically retry on fail until attempts run out
                        _e = !utils_1.isFunction(retryOn) && Array.isArray(retryOn) && retryOn.length < 1;
                        if (_e) 
                        // if we just have `retries` set with NO `retryOn` then
                        // automatically retry on fail until attempts run out
                        return [3 /*break*/, 20];
                        _f = utils_1.isFunction(retryOn);
                        if (!_f) return [3 /*break*/, 19];
                        return [4 /*yield*/, retryOn(opts)];
                    case 18:
                        _f = (_g.sent());
                        _g.label = 19;
                    case 19:
                        _e = _f;
                        _g.label = 20;
                    case 20:
                        shouldRetry = (_e) && retries > 0 && retries > attempt.current;
                        if (!shouldRetry) return [3 /*break*/, 22];
                        return [4 /*yield*/, retry(opts, routeOrBody, body)];
                    case 21:
                        res = _g.sent();
                        return [2 /*return*/, res];
                    case 22:
                        if (err_3.name !== 'AbortError')
                            newError = utils_1.makeError(err_3.name, err_3.message);
                        return [3 /*break*/, 24];
                    case 23:
                        timedout = false;
                        if (timer)
                            clearTimeout(timer);
                        controller.current = undefined;
                        return [7 /*endfinally*/];
                    case 24:
                        if (newRes && !newRes.ok && !newError)
                            newError = utils_1.makeError(newRes.status, newRes.statusText);
                        if (!suspense && !lazy && cachePolicy !== SWR)
                            setLoading(false);
                        if (attempt.current === retries)
                            attempt.current = 0;
                        if (newError)
                            onError({ error: newError });
                        error.current = newError;
                        return [2 /*return*/, {
                                options: options,
                                data: newData,
                                error: newError,
                                path: reqID,
                                ok: (newRes === null || newRes === void 0 ? void 0 : newRes.ok) === true,
                                status: newRes === null || newRes === void 0 ? void 0 : newRes.status,
                                statusText: newRes === null || newRes === void 0 ? void 0 : newRes.statusText,
                            }];
                }
            });
        }); }; // end of doFetch()
        var retry = function (opts, routeOrBody, body) { return __awaiter(_this, void 0, void 0, function () {
            var delay, res;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        delay = (utils_1.isFunction(retryDelay) ? retryDelay(opts) : retryDelay);
                        if (!(Number.isInteger(delay) && delay >= 0)) {
                            console.error('retryDelay must be a number >= 0! If you\'re using it as a function, it must also return a number >= 0.');
                        }
                        attempt.current++;
                        if (!delay) return [3 /*break*/, 2];
                        return [4 /*yield*/, utils_1.sleep(delay)];
                    case 1:
                        _a.sent();
                        _a.label = 2;
                    case 2: return [4 /*yield*/, doFetch(routeOrBody, body)];
                    case 3:
                        res = _a.sent();
                        return [2 /*return*/, res];
                }
            });
        }); };
        if (suspense) {
            return function () {
                var args = [];
                for (var _i = 0; _i < arguments.length; _i++) {
                    args[_i] = arguments[_i];
                }
                return __awaiter(_this, void 0, void 0, function () {
                    var res;
                    return __generator(this, function (_a) {
                        switch (_a.label) {
                            case 0:
                                suspender.current = doFetch.apply(void 0, args).then(function (newData) {
                                    suspenseStatus.current = 'success';
                                    return newData;
                                }, function () {
                                    suspenseStatus.current = 'error';
                                });
                                return [4 /*yield*/, suspender.current];
                            case 1:
                                res = _a.sent();
                                rerender();
                                return [2 /*return*/, res];
                        }
                    });
                });
            };
        }
        return doFetch;
    }, [isServer, onAbort, requestInit, host, path, interceptors, cachePolicy, perPage, timeout, persist, cacheLife, onTimeout, defaults.data, onNewData, rerender, suspense]);
    var post = react_1.useCallback(makeFetch(types_1.HTTPMethod.POST, true), [makeFetch]);
    var request = react_1.useMemo(function () { return ({
        get: makeFetch(types_1.HTTPMethod.GET, true),
        post: post,
        patch: makeFetch(types_1.HTTPMethod.PATCH, true),
        put: makeFetch(types_1.HTTPMethod.PUT, true),
        delete: makeFetch(types_1.HTTPMethod.DELETE, true),
        abort: function () { return controller.current && controller.current.abort(); },
        query: function (query, variables) { return post({ query: query, variables: variables }); },
        mutate: function (mutation, variables) { return post({ mutation: mutation, variables: variables }); },
        loading: loading.current,
        error: error.current
    }); }, [makeFetch, loading.current, error.current]);
    var revalidate = function () { };
    var setDataRevalidate = react_1.useCallback(function (dataOrFn, shouldRevalidate) {
        if (shouldRevalidate === void 0) { shouldRevalidate = true; }
        return __awaiter(_this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                // if (currentResponse.isCached)
                data.current = utils_1.isFunction(dataOrFn) ? dataOrFn(data.current) : dataOrFn;
                // this will need to trigger the other components with this
                // route to re-run their non-lazy useFetch requests
                if (shouldRevalidate) {
                    // TODO: revalidation
                }
                return [2 /*return*/];
            });
        });
    }, []);
    // onMount/onUpdate
    react_1.useEffect(function () {
        // if (Array.isArray(dependencies) || !mounted.current) {
        (function () { return __awaiter(_this, void 0, void 0, function () {
            var methodName, req, newData;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        methodName = (requestInit.method || types_1.HTTPMethod.GET);
                        req = makeFetch(methodName);
                        return [4 /*yield*/, req()];
                    case 1:
                        newData = (_a.sent()).data;
                        console.log(x + " data.current", data.current);
                        console.log(x + " newData", newData);
                        if (!fast_deep_equal_1.default(newData, data.current)) {
                            if (loading.current) {
                                data.current = newData;
                            }
                            else {
                                setData(newData);
                            }
                        }
                        if (loading.current)
                            setLoading(false);
                        // cache.errors[reqID] = error
                        mounted.current = true;
                        return [2 /*return*/];
                }
            });
        }); })();
        console.log(x + " useEffect data.current", data.current);
        console.log(x + " mounted.current", mounted.current);
        // }
        // const currentData = data.current
        // const initialData = cache.get(reqID) || defaults.initialData 
        // console.log('currentData', currentData)
        // console.log('initialData', initialData)
        // if (!isEqual(data.current, cache.get(reqID))) {
        //   setData(cache.get(reqID))
        // }
        // register global cache update listener
        var updateListener = function (shouldRevalidate, updatedData, updatedError, dedupe) {
            if (shouldRevalidate === void 0) { shouldRevalidate = true; }
            if (dedupe === void 0) { dedupe = true; }
            // update hook state
            var newState = {};
            var needUpdate = false;
            if (typeof updatedData !== 'undefined' &&
                !fast_deep_equal_1.default(data.current, updatedData)) {
                newState.data = updatedData;
                needUpdate = true;
            }
            // always update error
            // because it can be `undefined`
            // if (stateRef.current.error !== updatedError) {
            //   newState.error = updatedError
            //   needUpdate = true
            // }
            if (needUpdate) {
                setData(newState.data);
                // dispatch(newState)
            }
            if (shouldRevalidate) {
                // if (dedupe) {
                //   return softRevalidate()
                // } else {
                return revalidate();
                // }
            }
            return false;
        };
        // add updater to listeners
        cache.subscribe(updateListener);
        // if (!cache.revalidators[reqID]) {
        //   cache.revalidators[reqID] = [updateListener]
        // } else {
        //   // cache.revalidators[reqID].push(updateListener)
        // }
        return function () {
            mounted.current = false;
            cache.unsubscribe(updateListener);
            // remove(onUpdate).from(cache.revalidators[key])
        };
    }, [makeFetch, reqID]);
    if (suspense && suspender.current) {
        if (isServer)
            throw new Error('Suspense on server side is not yet supported! 🙅‍♂️');
        switch (suspenseStatus.current) {
            case 'pending':
                throw suspender.current;
            case 'error':
                throw error.current;
        }
    }
    console.log(x + " END cache", cache);
    console.log(x + " END cache.data", cache.data);
    console.log(x + " END data.current", data.current);
    return Object.assign([data.current, setDataRevalidate, request], __assign(__assign({ request: request, setDataRevalidate: setDataRevalidate }, request), { loading: loading.current, data: data.current, error: error.current }));
}
exports.useFetch = useFetch;
exports.default = useFetch;
//# sourceMappingURL=useFetch.js.map