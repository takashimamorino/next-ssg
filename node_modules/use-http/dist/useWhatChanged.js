"use strict";
var __spreadArrays = (this && this.__spreadArrays) || function () {
    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;
    for (var r = Array(s), k = 0, i = 0; i < il; i++)
        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)
            r[k] = a[j];
    return r;
};
Object.defineProperty(exports, "__esModule", { value: true });
// import { useWhatChanged } from "@simbathesailor/use-what-changed"
var react_1 = require("react");
var what_debug_changed = 0;
/**
 * Taken random color logic from some stackoverflow answer
 */
function getRandomColor() {
    var letters = '0123456789ABCDEF';
    var color = '#';
    for (var i = 0; i < 6; i++) {
        color += letters[Math.floor(Math.random() * 16)];
    }
    return color;
}
/**
 *
 * Check whether the dependency item is an object. then
 */
var isObject = function (t) {
    return Object.prototype.toString.call(t) === '[object Object]';
};
function getPrintableInfo(dependencyItem) {
    /**
     * Printing the info into viewable format
     */
    if (isObject(dependencyItem) || Array.isArray(dependencyItem)) {
        var ans = void 0;
        try {
            ans = JSON.stringify(dependencyItem, null, 2);
        }
        catch (e) {
            ans = 'CIRCULAR JSON';
        }
        return ans;
    }
    return dependencyItem;
}
var isDevelopment = process.env['NODE_ENV'] === 'development';
function useWhatChanged(dependency, dependencyNames, suffix) {
    console.log('here');
    // const logRef =
    // This ref is responsible for book keeping of the old value
    var dependencyRef = react_1.useRef(dependency);
    // For count bookkeeping , for easy debugging
    var whatChangedHookCountRef = react_1.useRef(1);
    // For assigning color for easy debugging
    var backgroundColorRef = react_1.useRef('');
    var isDependencyArr = Array.isArray(dependencyRef.current);
    react_1.useEffect(function () {
        // const MyWindow: IWindow = window;
        if (dependencyRef.current &&
            isDependencyArr &&
            dependencyRef.current.length > 0) {
            what_debug_changed++;
            whatChangedHookCountRef.current = what_debug_changed;
            backgroundColorRef.current = getRandomColor();
        }
    }, [dependencyRef, isDependencyArr]);
    function logBanners(_a) {
        var isFirstMount = _a.isFirstMount;
        if (isDevelopment) {
            console.log("%c " + whatChangedHookCountRef.current + " " + (suffix || ''), "background: " + backgroundColorRef.current + "; color: white; font-size: 10px", 'üßêüëá', "" + (isFirstMount ? 'FIRST RUN' : 'UPDATES'));
        }
    }
    var longBannersRef = react_1.useRef(logBanners);
    react_1.useEffect(function () {
        longBannersRef.current = logBanners;
    });
    react_1.useEffect(function () {
        if (!(dependencyRef.current && isDependencyArr)) {
            return;
        }
        if (dependencyRef.current.length === 0) {
            return;
        }
        // More info, if needed by user
        var stringSplitted = dependencyNames ? dependencyNames.split(',') : null;
        var changed = false;
        var whatChanged = dependency
            ? dependency.reduce(function (acc, dep, index) {
                if (dependencyRef.current && dep !== dependencyRef.current[index]) {
                    var oldValue = dependencyRef.current[index];
                    dependencyRef.current[index] = dep;
                    if (dependencyNames && stringSplitted) {
                        changed = true;
                        acc["\"\u2705\" " + stringSplitted[index]] = {
                            'Old Value': getPrintableInfo(oldValue),
                            'New Value': getPrintableInfo(dep),
                        };
                    }
                    else {
                        acc["\"\u2705\" " + index] = {
                            'Old Value': getPrintableInfo(oldValue),
                            'New Value': getPrintableInfo(dep),
                        };
                    }
                    return acc;
                }
                if (dependencyNames && stringSplitted) {
                    acc["\"\u23FA\" " + stringSplitted[index]] = {
                        'Old Value': getPrintableInfo(dep),
                        'New Value': getPrintableInfo(dep),
                    };
                }
                else {
                    acc["\"\u23FA\" " + index] = {
                        'Old Value': getPrintableInfo(dep),
                        'New Value': getPrintableInfo(dep),
                    };
                }
                return acc;
            }, {})
            : {};
        if (isDevelopment) {
            longBannersRef.current({ isFirstMount: !changed });
            console.table(whatChanged);
        }
    }, __spreadArrays((function () {
        if (dependency && isDependencyArr) {
            return dependency;
        }
        return [];
    })(), [
        dependencyRef,
        longBannersRef,
    ]));
}
exports.default = useWhatChanged;
//# sourceMappingURL=useWhatChanged.js.map